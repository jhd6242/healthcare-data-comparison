use_rmd(name = "healthcare-data-comparison")
---
title: "data-set-up"
author: "Kelli Fagan"
date: "1/12/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(scales)
library(tidyverse)
library(stringr)
```
```{r load-data}
counties_by_region = read_csv('./Counties_By_Region.csv')
county_info_lookup = counties_by_region %>%
mutate(County = str_to_title(COUNTY_NAME)) %>%
select(REGION, ST_CTY_CD, County)
# save lookup table for use in app
saveRDS(county_info_lookup, '../dev-app/county_info_lookup')
# get counties for each region
cny_counties = county_info_lookup %>% filter(REGION == 'CNY')
east_counties = county_info_lookup %>% filter(REGION == 'EAST')
roch_counties = county_info_lookup %>% filter(REGION == 'ROCH')
urm_counties = county_info_lookup %>% filter(REGION == 'URM')
wny_counties = county_info_lookup %>% filter(REGION == 'WNY')
# 2017 medicare plan data for all counties in NY State
ny_plans_2017 = read_csv('./p2_data_file_ehp_2017.csv')
names(ny_plans_2017) = tolower(names(ny_plans_2017))
# 2018 medicare plan data for all counties in NY State
ny_plans_2018 = read_csv('./p2_data_file_ehp_2019.csv') ## Changed from 18 to 19
names(ny_plans_2018) = tolower(names(ny_plans_2018))
```
```{r functions}
# fx(from scales package) to add dollar signs to fields representing....dollars
usd = function(x){
ifelse(!is.na(x), dollar_format(prefix = "$")(x), x)
}
formatCopayOnly = function(copay){
return(ifelse(!is.na(copay), usd(as.numeric(copay)), copay))
}
formatCoinsCopay = function(copay, coins){
# Take two vectors containing coinsurance and copay information for a specific medicare plan variable (eg. PCP Cost Share),
# determine whether payment method for each plan is coinsurance or copay, and then return as single vector containing
# formated payment information.
#
# Most medicare plans require coinsurance OR copay so if the plan variable has an amount for coinsurance,
# the copay will be NA and vice versa. However, some plans list amounts for both coinsurance AND copay.
#
# Args:
#   coins: vector of all coinsurance values for a medicare plan variable
#   copay: vector of all copay values for a medicare plan variable
#
# Returns:
#   A single character vector containing formated payment values for every plan.
#       1. coinsurance values are formated as 'xx%'
#       2. copay values are formated as '$xx.xx'
#       3. coinsurance and copay values are formated as 'xx% or $xx.xx'
payment = vector()
for (i in 1:length(copay)) {
if (sum(!is.na(copay[i]), !is.na(coins[i])) > 1) {
if (copay[i] == 0 && coins[i] != 0) {
payment = c(payment, scales::percent(as.numeric(coins[i]/100)))
} else {
payment = c(payment, usd(as.numeric(copay[i])))
}
} else if (!is.na(copay[i])) {
# return(usd(as.numeric(copay)))
payment = c(payment, usd(as.numeric(copay[i])))
} else if (!is.na(coins[i])) {
# return(scales::percent(as.numeric(coins)/100))
payment = c(payment, scales::percent(as.numeric(coins[i]/100)))
} else {
payment = c(payment, NA)
}
}
return(payment)
}
# take a plan name and remove brand names
cleanName = function(plan_name, ny_plans){
brands = unique(ny_plans$brand)
remove = c("Today's Options", "WellCare", "for", "'s", "BlueShield", "BlueCross", "Univera", "MedicareComplete", "Medicare")#, "Advantage")
brands = c(brands, remove)
pattern = paste0("(", paste(brands, collapse = ")|("), ")")
str_replace_all(unique(plan_name), pattern, '') %>%
removePlanType() %>%
str_trim(side = 'both') %>%
unique
}
# take a plan name and remove (PLAN TYPE) unless it's the Aetna Value Plan (HMO)/(PPO)
removePlanType = function(plan_name) {
if (is.na(str_match(plan_name, "Value Plan"))) {
plan_type = "(\\([A-Za-z\\-\\s]{3,12}\\))"
str_replace(plan_name, plan_type, '')
} else {
plan_name
}
}
# select necessary variables, rename them, and include coinsurance and copay amounts in same column when applicable.
# make this a function
formatPlanVars = function(ny_plans){
selected_vars = ny_plans %>%
rename(Year = contract_year,
County = county,
Brand = brand) %>%
# 'Plan Name' = plan_name) %>%
mutate(
'Plan Name' = map_chr(plan_name, function(x) cleanName(x, ny_plans[,'brand'])),
# 'Plan Name Orig' = plan_name,
'Plan Type' = ifelse(plan_type == '01', 'HMO',
ifelse(plan_type == '02', 'HMO-POS',
ifelse(plan_type == '04', 'Local PPO',
ifelse(plan_type == '09', 'PFFS',
ifelse(plan_type == '31', 'Regional PPO',
'ERROR - Check coding')
)
)
)
),
# format dollar amounts for copay only values
'Monthly Premium' = formatCopayOnly(premium_amt),
'Out of Pocket Max' = formatCopayOnly(oopmax_amt),
'Medical Deductible' = formatCopayOnly(med_deduct_amt),
'Part D Coverage' = ifelse(plan_rx_yn == 1, 'Yes', 'No'),
'Drug Deductible' = formatCopayOnly(partd_deduct_amt),
'ICL' =  formatCopayOnly(partd_icl_amt),
# combine coinsurance and copay amounts and format appropriately
'Drug Tier 1' = formatCoinsCopay(drugtier1_copay_amt, drugtier1_coins_amt),
'Drug Tier 2' = formatCoinsCopay(drugtier2_copay_amt, drugtier2_coins_amt),
'Drug Tier 3' = formatCoinsCopay(drugtier3_copay_amt, drugtier3_coins_amt),
'PCP' =  formatCoinsCopay(pcp_copay_amt, pcp_coins_amt),
'Specialist' =  formatCoinsCopay(spec_copay_amt, spec_coins_amt),
'Lab Procedures' = formatCoinsCopay(labproc_copay_amt, labproc_coins_amt),
'Lab Services' = formatCoinsCopay(labsvcs_copay_amt, labsvcs_coins_amt),
'Hospital Inpatient Per Stay' = formatCopayOnly(inpat_copay_stay_amt),
'Hospital Inpatient Days 1-5' = formatCopayOnly(inpat_copay_int1_amt),
'Hospital Outpatient' = formatCoinsCopay(op_copay_amt, op_coins_amt),
'Radiology X-Ray' = formatCoinsCopay(rad_xray_copay_amt, rad_xray_coins_amt),
'Radiology Diagnostic' = formatCoinsCopay(rad_diag_copay_amt, rad_diag_coins_amt),
'Radiology Therapeutic' = formatCoinsCopay(rad_ther_copay_amt, rad_ther_coins_amt),
'Mental Health Inpatient Per Stay' = formatCopayOnly(mental_inpat_copay_stay_amt),
'Mental Health Inpatient Days 1-5' = formatCopayOnly(mental_inpat_copay_int1_amt),
'Mental Health Individual' = formatCoinsCopay(mental_indiv_copay_amt, mental_indiv_coins_amt),
'Mental Health Group' = formatCoinsCopay(mental_group_copay_amt, mental_group_coins_amt),
'Emergency' = formatCoinsCopay(er_copay_amt, er_coins_amt),
'Urgent Care' = formatCoinsCopay(uc_copay_amt, uc_coins_amt),
'Home Health' = formatCoinsCopay(hh_copay_amt, hh_coins_amt),
'Occupational Therapy' = formatCoinsCopay(ot_copay_amt, ot_coins_amt),
'Physical Therapy' = formatCoinsCopay(pt_copay_amt, pt_coins_amt),
'Podiatry' = formatCoinsCopay(podiatry_medicare_copay_amt, podiatry_medicare_coins_amt),
'Overall Star Rating' = star_overall,
Hearing = ifelse(hearing_benefit_yn == 1, 'Yes', 'No'),
Vision = ifelse(vision_benefit_yn == 1, 'Yes', 'No'),
'Preventive Dental' = ifelse(prevdental_benefit_yn == 1, 'Yes', 'No'),
Fitness = ifelse(fitness_benefit_yn == 1, 'Yes', 'No'),
Notes = '',
Status = 'Unmodified') %>%
select(bid_id,
Year,
County,
Brand,
# 'Plan Name Orig',
'Plan Name',
'Plan Type',
'Monthly Premium',
'Out of Pocket Max',
'Medical Deductible',
'Part D Coverage',
'Drug Deductible',
'ICL',
'Drug Tier 1',
'Drug Tier 2',
'Drug Tier 3',
'PCP',
'Specialist',
'Lab Procedures',
'Lab Services',
'Hospital Inpatient Per Stay',
'Hospital Inpatient Days 1-5' ,
'Hospital Outpatient',
'Overall Star Rating',
'Radiology X-Ray',
'Radiology Diagnostic',
'Radiology Therapeutic',
'Mental Health Inpatient Per Stay',
'Mental Health Inpatient Days 1-5',
'Mental Health Individual',
'Mental Health Group',
'Emergency',
'Urgent Care',
'Home Health',
'Occupational Therapy',
'Physical Therapy',
'Podiatry',
'Preventive Dental',
Hearing,
Vision,
Fitness,
Notes,
Status,
contract_id, plan_id, segment_id, org_type, cc_id, uid, ssa_code,
premium_ad,
starts_with('a_county'), starts_with('cnt_'), starts_with('de_'), starts_with('cty_'),
starts_with('lc_cnt_'), starts_with('lc_de_'), starts_with('lc_cty_'),
starts_with('plan_n'), starts_with('lcp_'), starts_with('ml_'), starts_with('mla_'), starts_with('mlp_'))
return(selected_vars)
}
getRegionPlans = function(formatted_vars, region_counties){
# merge on region county ssa_codes to get plans for counties in target region
region_plans = inner_join(formatted_vars, region_counties, by = c('ssa_code' = 'ST_CTY_CD', 'County')) %>%
mutate(Region =
case_when(REGION == 'CNY' ~ 'Central NY Southern',
REGION == 'EAST' ~ 'East',
REGION == 'ROCH' ~ 'Rochester',
REGION == 'URM' ~ "Utica-Rome",
REGION == 'WNY' ~ "Western NY")) %>%
# select(-REGION, -COUNTY_NAME) %>%
# reorder columns so it's consistent with the dashboard order
select(Status, Region, County, everything(), -bid_id, -Year, -REGION) %>%
select(-ssa_code, ssa_code)
return(region_plans)
}
```
```{r}
# Create different folder for each region and save a base scenario there
if (!file.exists('../dev-app/scenarios/cny/')){
print('Creating cny folder')
dir.create('../dev-app/scenarios/cny/', recursive = TRUE, mode = '0777')
}
if (!file.exists('../dev-app/scenarios/east/')){
print('Creating east folder')
dir.create('../dev-app/scenarios/east/', recursive = TRUE, mode = '0777')
}
if (!file.exists('../dev-app/scenarios/roch/')){
print('Creating roc folder')
dir.create('../dev-app/scenarios/roch/', recursive = TRUE, mode = '0777')
}
if (!file.exists('../dev-app/scenarios/urm/')){
print('Creating urm folder')
dir.create('../dev-app/scenarios/urm/', recursive = TRUE, mode = '0777')
}
if (!file.exists('../dev-app/scenarios/wny/')){
print('Creating west folder')
dir.create('../dev-app/scenarios/wny/', recursive = TRUE, mode = '0777')
}
# # 2017 base scenarios
# formatted_vars = formatPlanVars(ny_plans_2017)
#
# # get 2017 plans for each region
# cny_plans = getRegionPlans(formatted_vars, cny_counties) %>% arrange(uid)
# east_plans = getRegionPlans(formatted_vars, east_counties) %>% arrange(uid)
# roch_plans = getRegionPlans(formatted_vars, roch_counties) %>%
#     # fill in missing plan name for roch_plans 2017
#     mutate(`Plan Name` = ifelse(is.na(`Plan Name`), "WellCare Value (HMO)", `Plan Name`)) %>% arrange(uid)
#
# urm_plans = getRegionPlans(formatted_vars, urm_counties) %>% arrange(uid)
# wny_plans = getRegionPlans(formatted_vars, wny_counties) %>% arrange(uid)
#
# excellus_plans = bind_rows(cny_plans, east_plans, roch_plans, urm_plans, wny_plans)
#
# saveRDS(cny_plans, '../dev-app/scenarios/cny/base_scenario_cny_2017')
# saveRDS(east_plans, '../dev-app/scenarios/east/base_scenario_east_2017')
# saveRDS(roch_plans, '../dev-app/scenarios/roch/base_scenario_roch_2017')
# saveRDS(urm_plans, '../dev-app/scenarios/urm/base_scenario_urm_2017')
# saveRDS(wny_plans, '../dev-app/scenarios/wny/base_scenario_wny_2017')
# saveRDS(excellus_plans, '../dev-app/scenarios/base_scenario_2017')
# 2018 base scenarios
formatted_vars = formatPlanVars(ny_plans_2018)
saveRDS(formatted_vars, './formatted-ny-plans-2018')
# get 2018 plans for each region
cny_plans = getRegionPlans(formatted_vars, cny_counties) %>% arrange(uid)
east_plans = getRegionPlans(formatted_vars, east_counties) %>% arrange(uid)
roch_plans = getRegionPlans(formatted_vars, roch_counties) %>% arrange(uid)
urm_plans = getRegionPlans(formatted_vars, urm_counties) %>% arrange(uid)
wny_plans = getRegionPlans(formatted_vars, wny_counties) %>% arrange(uid)
excellus_plans = bind_rows(cny_plans, east_plans, roch_plans, urm_plans, wny_plans)
saveRDS(cny_plans, '../dev-app/scenarios/cny/base_scenario_cny_2018')
saveRDS(east_plans, '../dev-app/scenarios/east/base_scenario_east_2018')
saveRDS(roch_plans, '../dev-app/scenarios/roch/base_scenario_roch_2018')
saveRDS(urm_plans, '../dev-app/scenarios/urm/base_scenario_urm_2018')
saveRDS(wny_plans, '../dev-app/scenarios/wny/base_scenario_wny_2018')
saveRDS(excellus_plans, '../dev-app/scenarios/base_scenario_2018')
```
```{r create-actuarial-scenarios}
source("../dev-app/app-functions.r")
actuarial_scenario_1_roch = roch_plans %>%
mutate(`Monthly Premium` = replace(`Monthly Premium`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(20.00)),
`Monthly Premium` = replace(`Monthly Premium`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(89.00)),
`Monthly Premium` = replace(`Monthly Premium`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(167.00)),
`Monthly Premium` = replace(`Monthly Premium`, which(`Plan Name` == 'Blue Choice Optimum'), formatCopayOnly(266.00)))
# Basic Alternative
actuarial_scenario_2_roch = roch_plans %>%
mutate(`PCP` = replace(`PCP`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(20.00)),
`Lab Services` = replace(`Lab Services`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(25.00)),
`Lab Procedures` = replace(`Lab Procedures`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(25.00)),
`Radiology X-Ray` = replace(`Radiology X-Ray`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(60.00)),
`Drug Deductible` = replace(`Drug Deductible`, which(`Plan Name` == 'Blue Choice Select'), formatCopayOnly(405.00)),
`PCP` = replace(`PCP`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(15.00)),
`Lab Services` = replace(`Lab Services`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(15.00)),
`Lab Procedures` = replace(`Lab Procedures`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(15.00)),
`Drug Deductible` = replace(`Drug Deductible`, which(`Plan Name` == 'Blue Choice Value'), formatCopayOnly(325.00)),
`Drug Deductible` = replace(`Drug Deductible`, which(`Plan Name` == 'Blue Choice Value Plus'), formatCopayOnly(100.00)))
saveRDS(actuarial_scenario_1_roch, '../dev-app/scenarios/roch/actuarial_scenario_1_roch')
saveRDS(actuarial_scenario_2_roch, '../dev-app/scenarios/roch/actuarial_scenario_2_roch')
```
```{r}
contract_brand_org_plan = read_csv('./p2_contract_brand_org_plan.csv')
contract_orgtype_lookup = contract_brand_org_plan %>%
mutate(plan_type =
case_when(plan_type == '01' ~ 'HMO',
plan_type == '02' ~ 'HMO-POS',
plan_type == '04' ~ 'Local PPO',
plan_type == '09' ~ 'PFFS',
plan_type == '31' ~ 'Regional PPO'))
View(contract_orgtype_lookup)
saveRDS(contract_orgtype_lookup, '../dev-app/contract_orgtype_lookup')
```
Check that the scenarios have all the plans
Clean up this code!
```{r}
# # Compare plans from 2018 to
# library(readxl)
#
# macvat = read_excel("2018 Milliman MACVAT DATA MATRIX - Version 1.0 - NY.xlsx", sheet = 1, skip = 1)
#
# macvat2 = macvat %>% mutate(preuid = str_replace(`Contract - Plan`, "[0-9]{3}$", str_sub(`Contract - Plan`, -1, -1)) %>%
#                                 str_replace_all(" - ", "_"),
#                             uid = paste0('2018', preuid, `SSA Code`),
#                             ptype = str_extract(`2018 Plan Name`, "\\(.*\\)") %>% str_replace_all("[\\(\\)]", '')) %>%
#     select(uid, County, `Parent Name`, `2018 Plan Name`, ptype, `2018 Plan Type`, `2018 Network / Benefit Type`) %>%
#     inner_join(county_info_lookup, by = "County") %>%
#     filter(!is.na(REGION))
#
#
# county_info_lookup %>% filter(!is.na(REGION)) %>% unique %>% nrow
# macvat2$County %>% unique %>% length
#
# View(macvat2)
#
# cny_plans = readRDS('../dev-app/scenarios/cny/base_scenario_cny_2018')
# east_plans = readRDS('../dev-app/scenarios/east/base_scenario_east_2018')
# roch_plans = readRDS('../dev-app/scenarios/roch/base_scenario_roch_2018')
# urm_plans = readRDS('../dev-app/scenarios/urm/base_scenario_urm_2018')
# wny_plans = readRDS('../dev-app/scenarios/wny/base_scenario_wny_2018')
# excellus_plans = readRDS('../dev-app/scenarios/base_scenario_2018')
#
#
# ehp = excellus_plans %>% select(uid, Region, County, Brand, `Plan Name`)
#
# missing.plans = left_join(macvat2, ehp, by = 'uid')
#
# missing.plans %>% filter(is.na(Brand)) %>%
#     group_by(ptype, `2018 Plan Type`, `2018 Network / Benefit Type`) %>%
#     summarize(count = n()) %>% View()
#
# View(cny_plans)
```
```{r}
# #plan name same but plan id different
#
# groups = groupByCounty(excellus_plans)
# dups = groups %>% group_by(`Plan Name`, Region, Brand) %>% summarize(count = n()) %>% arrange(-count) %>% filter(count > 1) %>% pull(`Plan Name`)
#
# groups %>% filter(`Plan Name` %in% dups) %>% select(-(`Part D Coverage`:Notes)) %>% arrange(contract_id, plan_id, segment_id) %>% View('dup names')
#
#
#
#
# test = excellus_plans %>% select(Region, Brand, `Plan Name Orig`, `Plan Name`) %>% distinct()
# dups = test %>% group_by(`Plan Name`) %>% summarize(count = n()) %>% arrange(-count) %>% filter(count > 1) %>% pull(`Plan Name`)
# test %>% filter(`Plan Name` %in% dups) %>% arrange(`Plan Name`, Region) %>% distinct() %>% View()
```
---
title: "Medicare Forecasting Dashboard Manual Files"
author: "K.Fagan"
date: "1/04/2018"
output: html_document
---
```{r setup, include=FALSE}
library(tidyverse)
library(scales) # for dollar and percent formating
library(naturalsort) # to properly sort dollar and percent values
```
## Create initial manual files
The medicare forecasting app has preset default values for each plan feature that are stored in manual files. The app allows the user to change the default values so these manual files must be saved in the localsave directory and be read/write accessible by the app so the changes can be made.
```{r create-manual-files}
# load in 2018 plans
ny_plans_selected_var = readRDS('./formatted-ny-plans-2018')
# text values only decided against manual files for these values
brand_manual_file = as.tibble(cbind(Status = 'Active', Values = sort(unique(ny_plans_selected_var$Brand))))
plan_type_manual_file = as.tibble(cbind(Status = 'Active', Values =  sort(unique(ny_plans_selected_var$`Plan Type`))))
overall_star_rating_manual_file = as.tibble(cbind(Status = 'Active', Values = c(seq(1, 5, by = 0.5), "Plan too new to be measured")))
# copay only
monthly_premium_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Monthly Premium`))))
out_of_pocket_max_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Out of Pocket Max`))))
medical_deductible_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Medical Deductible`))))
drug_deductible_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Drug Deductible`))))
icl_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$ICL))))
# copay and coins
drug_tier_1_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Drug Tier 1`))))
drug_tier_2_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Drug Tier 2`))))
drug_tier_3_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Drug Tier 3`))))
pcp_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$PCP))))
specialist_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$Specialist))))
lab_services_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Lab Services`))))
lab_procedures_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Lab Procedures`))))
hospital_inpatient_per_stay_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Hospital Inpatient Per Stay`))))
hospital_inpatient_days_15_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Hospital Inpatient Days 1-5`))))
hospital_outpatient_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Hospital Outpatient`))))
radiology_xray_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Radiology X-Ray`))))
radiology_diagnostic_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Radiology Diagnostic`))))
radiology_therapeutic_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Radiology Therapeutic`))))
home_health_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Home Health`))))
emergency_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$Emergency))))
urgent_care_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Urgent Care`))))
mental_health_inpatient_per_stay_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Mental Health Inpatient Per Stay`))))
mental_health_inpatient_days_15_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Mental Health Inpatient Days 1-5`))))
mental_health_individual_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Mental Health Individual`))))
mental_health_group_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Mental Health Group`))))
occupational_therapy_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Occupational Therapy`))))
physical_therapy_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$`Physical Therapy`))))
podiatry_manual_file = as.tibble(cbind(Status = 'Active', Values = naturalsort(unique(ny_plans_selected_var$Podiatry))))
```
## Save the manual files as RDS Files for use in the App
These files will need to be saved locally on the RStudio Connect Server and the app needs read/write permission. Therefore, save them in localsave.
```{r save-rds-objects}
save.path <- '/apps/rspro/localsave/projects/medicare-forecasting-dashboard/manual-files/'
if (!dir.exists(save.path)){
print('Creating manual-files folder')
dir.create(save.path, recursive = TRUE)
# change file permissions of folder to 775
Sys.chmod(save.path, mode = '0775', use_umask = FALSE)
} else {
print('Folder already exists')
}
# list of R objects to save
objects.to.save = grep('_manual_file', ls(), value = T)
save.objects <- function(objs.list, save.path) {
for (i in 1:length(objs.list)) {
# The manual files should only be created once on the RStudio Connect Server because we do not want to overwrite any changes that the user makes to them
# Therefore only save files if they do not already exist
if (!file.exists(paste0(save.path, objs.list[i]))) {
# if(TRUE){
# save the RDS object
object <- get(objs.list[i])
saveRDS(object, file = paste0(save.path, objs.list[i]))
# change file permissions of RDS objects to 775
Sys.chmod(paste0(save.path, objs.list[i]), mode = '0775', use_umask = FALSE)
print(paste0(objs.list[i], " has been saved to ", save.path))
# check that the RDS object is identical to the original
check <- readRDS(file = paste0(save.path, objs.list[i]))
print(paste0("Identical: ", identical(object, check, ignore.environment = TRUE)))
} else {
print(paste('Save failed. Manual file already exists:', objs.list[i]))
}
}
}
save.objects(objs.list = objects.to.save, save.path = save.path)
```
***
Last Updated: 01/22/18 - K.Fagan
***
---
output:
html_document:
toc: true
toc_float: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Project Title
## Project subtitle
![jdecross - 2018-06-20](./ad-logo-long.png)
***
```{r}
```
***
Last Updated: `r Sys.getenv("USER")` `r Sys.Date()`
***
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
install.packages("naturalsort")
install.packages("scales")
shiny::runApp('/apps/rspro/projects/hedis-chart-assignment-optimization/app/dev-app')
install.packages("shinydashboard")
install.packages("leaflet")
install.packages("flexdashboard")
County_Payer<- c('County','Line of Business')
visits<- list(
'Emergency Room'= c('Opioid.ER.visits','Total.ER.visits','ER.visit.rate'),
'Inpatient' =
c('Opioid.Inpatient.visits','Total.Inpatient.visits','Inpatient.visit.rate'),
'Outpatient' =
c('Opioid.Outpatient.visits','Total.Outpatient.visits','Outpatient.visit.rate'),
'Professional' =
c('Opioid.Professional.visits','Total.Professional.visits','Professional.visit.rate'),
'Other' =
c('Opioid.Other.visits','Total.Other.visits','Other.visit.rate')
)
levels(Excellus$Payer)[levels(Excellus$Payer)=="Direct Pay Hmo"] <- "Direct Pay HMO"
levels(Excellus$Payer)[levels(Excellus$Payer)=="Direct Pay Pos"] <- "Direct Pay POS"
levels(Excellus$Payer)[levels(Excellus$Payer)=="Ssa"] <- "SSA"
#levels(Excellus$Payer)[levels(Excellus$Payer)=="<Unknown>"] <- "Unknown"
#remove the Unknown Payer
#Excellus$Payer<- Excellus$Payer[!Excellus$Payer%in%c('<Unknown>')]
#payer <- c('Child Health Plus', 'Commercial', 'Direct Pay HMO', 'Direct Pay POS', 'Family Health Plus', 'Healthy New York','Healthy New York Plus', 'Basic Health Plan', 'Medicaid','Medicare', 'SSA', "Valumed", "Unknown")
payer <- c('Child Health Plus', 'Commercial', 'Direct Pay HMO', 'Direct Pay POS', 'Family Health Plus', 'Healthy New York','Healthy New York Plus', 'Basic Health Plan', 'Medicaid','Medicare', 'SSA', "Valumed")
setwd("/apps/rspro/projects/Opioid_Excellus/Excellus/app-dev/2018june13justin")
setwd("/apps/rspro/projects/Opioid_Excellus/Excellus/app-dev")
setwd("/apps/rspro/projects/Opioid_Excellus/Excellus/app-dev/2018june13justin")
